import chalk from "chalk";
import settings from "../settings.js";
import { generateWAMessageFromContent } from "@whiskeysockets/baileys";

const commands = {
  command: ["test"],
};

async function sendList(
  sock,
  jid,
  title,
  text,
  buttonText,
  listSections,
  quoted,
  options = {}
) {
  const message = {
    interactiveMessage: {
      header: {
        title: title,
        hasMediaAttachment: false,
      },
      body: { text: text },
      nativeFlowMessage: {
        buttons: [
          {
            name: "single_select",
            buttonParamsJson: JSON.stringify({
              title: buttonText,
              sections: listSections,
            }),
          },
        ],
        messageParamsJson: "",
      },
    },
  };

  let msgL = generateWAMessageFromContent(
    jid,
    {
      viewOnceMessage: {
        message,
      },
    },
    { userJid: sock.user.jid, quoted }
  );

  try {
    await sock.relayMessage(jid, msgL.message, {
      messageId: msgL.key.id,
      ...options,
    });
  } catch (error) {
    console.error("Failed to send list:", error);
    throw error;
  }
}

export async function handleMessage(sock, msg) {
  const sender = msg.key.remoteJid;

  if (msg.message && msg.message.interactiveResponseMessage) {
    const selectedOption = JSON.parse(
      msg.message.interactiveResponseMessage.nativeFlowResponseMessage
        .paramsJson
    ).id;
    console.log("Selected option:", selectedOption);

    // Handle the selected option and send a confirmation
    let confirmationMessage = "";
    switch (selectedOption) {
      case `${settings.prefix}music`:
        confirmationMessage =
          "You've selected üéµ Music. Get ready to explore some great tunes!";
        break;
      case `${settings.prefix}video`:
        confirmationMessage =
          "You've chosen üìπ Video. Let's dive into some awesome video content!";
        break;
      case `${settings.prefix}books`:
        confirmationMessage =
          "You've picked üìö Books. Time to discover your next favorite read!";
        break;
      case `${settings.prefix}games`:
        confirmationMessage =
          "You've opted for üéÆ Games. Get ready for some gaming excitement!";
        break;
      case `${settings.prefix}food`:
        confirmationMessage =
          "You've chosen üçî Food. Prepare your taste buds for a culinary adventure!";
        break;
      default:
        confirmationMessage =
          "Oops! That's not a valid option. Please try again.";
    }

    // Send the confirmation message
    await sock.sendMessage(sender, { text: confirmationMessage });

    console.log(chalk.green(`Sent confirmation for option: ${selectedOption}`));
  } else if (
    msg.message &&
    msg.message.conversation &&
    msg.message.conversation.startsWith(settings.prefix)
  ) {
    // Handle the initial command to send the list (your existing code)
    const parts = msg.message.conversation
      .slice(settings.prefix.length)
      .trim()
      .toLowerCase()
      .split(" ");
    const command = parts[0];

    if (commands.command.includes(command)) {
      try {
        const title = "Main Menu";
        const text = "Please select a category:";
        const buttonText = "View Categories";

        const listSections = [
          {
            title: "Categories",
            rows: [
              {
                title: "üéµ Music",
                description: "Explore music options",
                id: `${settings.prefix}music`,
              },
              {
                title: "üìπ Video",
                description: "Check out video content",
                id: `${settings.prefix}video`,
              },
              {
                title: "üìö Books",
                description: "Browse books",
                id: `${settings.prefix}books`,
              },
              {
                title: "üéÆ Games",
                description: "Discover games",
                id: `${settings.prefix}games`,
              },
              {
                title: "üçî Food",
                description: "Explore food options",
                id: `${settings.prefix}food`,
              },
            ],
          },
        ];

        await sendList(
          sock,
          sender,
          title,
          text,
          buttonText,
          listSections,
          msg
        );

        console.log(chalk.green("List sent successfully!"));
      } catch (error) {
        console.error(chalk.red("Failed to send list: "), error);
      }
    }
  }
}
