// import {
//   generateWAMessageFromContent,
//   prepareWAMessageMedia,
// } from "@whiskeysockets/baileys";
// import fetch from "node-fetch";
// import settings from "../settings.js";

// // Import or define these lists from separate files
// import { reciterList, surahList } from "../lib/quranData.js";

// export async function sendList(
//   sock,
//   jid,
//   title,
//   text,
//   buttonText,
//   listSections,
//   quoted,
//   options = {}
// ) {
//   const message = {
//     interactiveMessage: {
//       header: {
//         title: title,
//         hasMediaAttachment: false,
//       },
//       body: { text: text },
//       nativeFlowMessage: {
//         buttons: [
//           {
//             name: "single_select",
//             buttonParamsJson: JSON.stringify({
//               title: buttonText,
//               sections: listSections,
//             }),
//           },
//         ],
//         messageParamsJson: "",
//       },
//     },
//   };

//   let msgL = generateWAMessageFromContent(
//     jid,
//     {
//       viewOnceMessage: {
//         message,
//       },
//     },
//     { userJid: sock.user.jid, quoted }
//   );

//   try {
//     await sock.relayMessage(jid, msgL.message, {
//       messageId: msgL.key.id,
//       ...options,
//     });
//   } catch (error) {
//     console.error("Failed to send list:", error);
//     throw error;
//   }
// }

// const commands = {
//   command: ["list"],
// };

// // Use a Map for better performance and to avoid global variables
// const userStates = new Map();

// export async function handleMessage(sock, msg) {
//   try {
//     const sender = msg.key.remoteJid;
//     const messageBody =
//       msg.message.conversation || msg.message.extendedTextMessage?.text || "";
//     const parts = messageBody
//       .slice(settings.prefix.length)
//       .trim()
//       .toLowerCase()
//       .split(" ");
//     const command = parts[0];

//     if (commands.command.includes(command)) {
//       await sendReciterList(sock, sender, msg);
//     } else if (messageBody.startsWith("reciter")) {
//       await handleReciterSelection(sock, sender, msg, messageBody);
//     } else if (messageBody.startsWith("surah")) {
//       await handleSurahSelection(sock, sender, messageBody);
//     }
//   } catch (error) {
//     console.error("Error in handleMessage:", error);
//     await sock.sendMessage(msg.key.remoteJid, { text: "An error occurred. Please try again." });
//   }
// }

// async function sendReciterList(sock, sender, msg) {
//   const title = "My List";
//   const text = "Please select a reciter:";
//   const buttonText = "اختيار القارئ";
//   const listSections = [
//     {
//       title: "قائمة المقرئين",
//       rows: reciterList.map(reciter => ({
//         header: "",
//         title: reciter.title,
//         description: "",
//         id: reciter.id,
//       })),
//     },
//   ];

//   try {
//     await sendList(
//       sock,
//       sender,
//       title,
//       text,
//       buttonText,
//       listSections,
//       msg
//     );
//     console.log("Reciter list sent successfully");
//   } catch (error) {
//     console.error("Failed to send reciter list:", error);
//     throw error;
//   }
// }

// async function handleReciterSelection(sock, sender, msg, messageBody) {
//   const reciter = messageBody.split(" ")[1];
//   if (!reciter) {
//     await sock.sendMessage(sender, { text: "Invalid reciter selection." });
//     return;
//   }

//   userStates.set(sender, { selectedReciter: reciter });

//   const title = "Select Surah";
//   const text = "Please select a Surah:";
//   const buttonText = "اختيار السورة";
//   const listSections = [
//     {
//       title: "قائمة السور",
//       rows: surahList.map((surah) => ({
//         header: "",
//         title: surah.title,
//         description: "",
//         id: surah.id,
//       })),
//     },
//   ];

//   try {
//     await sendList(
//       sock,
//       sender,
//       title,
//       text,
//       buttonText,
//       listSections,
//       msg
//     );
//     console.log("Surah list sent successfully");
//   } catch (error) {
//     console.error("Failed to send Surah list:", error);
//     throw error;
//   }
// }

// async function handleSurahSelection(sock, sender, messageBody) {
//   const surahId = messageBody.split(" ")[1];
//   if (!surahId) {
//     await sock.sendMessage(sender, { text: "Invalid surah selection." });
//     return;
//   }

//   const userState = userStates.get(sender);
//   if (!userState || !userState.selectedReciter) {
//     await sock.sendMessage(sender, { text: "Please select a reciter first." });
//     return;
//   }

//   const downloadUrl = `https://everyayah.com/data/${userState.selectedReciter}/${surahId.padStart(3, '0')}.mp3`;

//   try {
//     await sock.sendMessage(sender, { text: `Here is your download link: ${downloadUrl}` });
//     console.log(`Download link sent: ${downloadUrl}`);
//   } catch (error) {
//     console.error("Failed to send download link:", error);
//     throw error;
//   }
// }

// SECOND SCRIPT

// import {
//   generateWAMessageFromContent,
//   prepareWAMessageMedia,
// } from "@whiskeysockets/baileys";
// import fetch from "node-fetch";
// import settings from "../settings.js";

// // Import or define these lists from separate files
// import { reciterList, surahList } from "../lib/quranData.js";

// export async function sendList(
//   sock,
//   jid,
//   title,
//   text,
//   buttonText,
//   listSections,
//   quoted,
//   options = {}
// ) {
//   const message = {
//     interactiveMessage: {
//       header: {
//         title: title,
//         hasMediaAttachment: false,
//       },
//       body: { text: text },
//       nativeFlowMessage: {
//         buttons: [
//           {
//             name: "single_select",
//             buttonParamsJson: JSON.stringify({
//               title: buttonText,
//               sections: listSections,
//             }),
//           },
//         ],
//         messageParamsJson: "",
//       },
//     },
//   };

//   let msgL = generateWAMessageFromContent(
//     jid,
//     {
//       viewOnceMessage: {
//         message,
//       },
//     },
//     { userJid: sock.user.jid, quoted }
//   );

//   try {
//     await sock.relayMessage(jid, msgL.message, {
//       messageId: msgL.key.id,
//       ...options,
//     });
//   } catch (error) {
//     console.error("Failed to send list:", error);
//     throw error;
//   }
// }

// const commands = {
//   command: ["quran"],
// };

// // Use a Map for better performance and to avoid global variables
// const userStates = new Map();

// export async function handleMessage(sock, msg) {
//   try {
//     const sender = msg.key.remoteJid;
//     const messageBody =
//       msg.message.conversation || msg.message.extendedTextMessage?.text || "";
//     const parts = messageBody
//       .slice(settings.prefix.length)
//       .trim()
//       .toLowerCase()
//       .split(" ");
//     const command = parts[0];

//     if (commands.command.includes(command)) {
//       await sendReciterList(sock, sender, msg);
//     } else if (msg.message.listResponseMessage) {
//       await handleListResponse(sock, sender, msg);
//     } else if (messageBody.startsWith("ayah")) {
//       await handleAyahSelection(sock, sender, msg, messageBody);
//     }
//   } catch (error) {
//     console.error("Error in handleMessage:", error);
//     await sock.sendMessage(msg.key.remoteJid, {
//       text: "An error occurred. Please try again.",
//     });
//   }
// }

// async function sendReciterList(sock, sender, msg) {
//   const title = "My List";
//   const text = "Please select a reciter:";
//   const buttonText = "اختيار القارئ";
//   const listSections = [
//     {
//       title: "قائمة المقرئين",
//       rows: reciterList.map((reciter) => ({
//         header: reciter.header,
//         title: reciter.title,
//         description: reciter.description,
//         id: reciter.id,
//       })),
//     },
//   ];

//   try {
//     await sendList(sock, sender, title, text, buttonText, listSections, msg);
//     console.log("Reciter list sent successfully");
//   } catch (error) {
//     console.error("Failed to send reciter list:", error);
//     throw error;
//   }
// }

// async function handleListResponse(sock, sender, msg) {
//   try {
//     const listResponse = msg.message.listResponseMessage;
//     const selectedId = listResponse.singleSelectReply.selectedRowId;

//     console.log(`List response received: ${selectedId}`);

//     if (selectedId.startsWith("reciter")) {
//       const reciterId = selectedId.split(" ")[1];
//       await handleReciterSelection(sock, sender, msg, `reciter ${reciterId}`);
//     } else if (selectedId.startsWith("surah")) {
//       const surahId = selectedId.split(" ")[1];
//       await handleSurahSelection(sock, sender, msg, `surah ${surahId}`);
//     }
//   } catch (error) {
//     console.error("Error handling list response:", error);
//     await sock.sendMessage(sender, {
//       text: "Failed to process your selection.",
//     });
//   }
// }

// async function handleReciterSelection(sock, sender, msg, messageBody) {
//   const reciter = messageBody.split(" ")[1];
//   if (!reciter) {
//     await sock.sendMessage(sender, { text: "Invalid reciter selection." });
//     return;
//   }

//   console.log(`Reciter selected: ${reciter}`);
//   userStates.set(sender, { selectedReciter: reciter });

//   const title = "Select Surah";
//   const text = "Please select a Surah:";
//   const buttonText = "اختيار السورة";
//   const listSections = [
//     {
//       title: "قائمة السور",
//       rows: surahList.map((surah) => ({
//         header: surah.header,
//         title: surah.title,
//         description: surah.description,
//         id: surah.id,
//       })),
//     },
//   ];

//   try {
//     await sendList(sock, sender, title, text, buttonText, listSections, msg);
//     console.log("Surah list sent successfully");
//   } catch (error) {
//     console.error("Failed to send Surah list:", error);
//     throw error;
//   }
// }

// async function handleSurahSelection(sock, sender, msg, messageBody) {
//   const surahId = messageBody.split(" ")[1];
//   if (!surahId) {
//     await sock.sendMessage(sender, { text: "Invalid surah selection." });
//     return;
//   }

//   console.log(`Surah selected: ${surahId}`);
//   const userState = userStates.get(sender);
//   if (!userState || !userState.selectedReciter) {
//     await sock.sendMessage(sender, { text: "Please select a reciter first." });
//     return;
//   }

//   userState.selectedSurah = surahId;
//   userStates.set(sender, userState);

//   await sock.sendMessage(sender, {
//     text: "Please provide the ayah number (3 digits, e.g., 025)",
//   });
// }

// async function handleAyahSelection(sock, sender, msg, messageBody) {
//   let ayahNumber = messageBody.split(" ")[1];
//   if (!ayahNumber) {
//     await sock.sendMessage(sender, { text: "Invalid ayah number." });
//     return;
//   }

//   // Validate and format ayah number
//   if (typeof ayahNumber === "number") {
//     ayahNumber = ayahNumber.toString().padStart(3, "0");
//   }
//   if (!/^\d{3}$/.test(ayahNumber)) {
//     await sock.sendMessage(sender, {
//       text: "Ayah number must be a 3-digit number (e.g., 025).",
//     });
//     return;
//   }

//   console.log(`Ayah selected: ${ayahNumber}`);
//   const userState = userStates.get(sender);
//   if (!userState || !userState.selectedReciter || !userState.selectedSurah) {
//     await sock.sendMessage(sender, {
//       text: "Please select a reciter and surah first.",
//     });
//     return;
//   }

//   userState.selectedAyah = ayahNumber;
//   const downloadUrl = `https://everyayah.com/data/${userState.selectedReciter}/${userState.selectedSurah}${userState.selectedAyah}.mp3`;

//   try {
//     await sock.sendMessage(sender, {
//       text: `Here is your download link: ${downloadUrl}`,
//     });
//     console.log(`Download link sent: ${downloadUrl}`);
//   } catch (error) {
//     console.error("Failed to send download link:", error);
//     throw error;
//   }
// }

import {
  generateWAMessageFromContent
} from "@whiskeysockets/baileys";
import fetch from "node-fetch";
import settings from "../settings.js";

// Import lists from separate files
import { reciterList, surahList } from "../lib/quranData.js";

export async function sendList(
  sock,
  jid,
  title,
  text,
  buttonText,
  listSections,
  quoted,
  options = {}
) {
  const message = {
    interactiveMessage: {
      header: {
        title: title,
        hasMediaAttachment: false,
      },
      body: { text: text },
      nativeFlowMessage: {
        buttons: [
          {
            name: "single_select",
            buttonParamsJson: JSON.stringify({
              title: buttonText,
              sections: listSections,
            }),
          },
        ],
        messageParamsJson: "",
      },
    },
  };

  let msgL = generateWAMessageFromContent(
    jid,
    {
      viewOnceMessage: {
        message,
      },
    },
    { userJid: sock.user.jid, quoted }
  );

  try {
    await sock.relayMessage(jid, msgL.message, {
      messageId: msgL.key.id,
      ...options,
    });
  } catch (error) {
    console.error("Failed to send list:", error);
    throw error;
  }
}

const commands = {
  command: ["quran"],
};

// Use a Map for better performance and to avoid global variables
const userStates = new Map();

export async function handleMessage(sock, msg) {
  try {
    const sender = msg.key.remoteJid;
    const messageBody =
      msg.message.conversation || msg.message.extendedTextMessage?.text || "";
    const parts = messageBody
      .slice(settings.prefix.length)
      .trim()
      .toLowerCase()
      .split(" ");
    const command = parts[0];

    if (commands.command.includes(command)) {
      await sendReciterList(sock, sender, msg);
    } else if (msg.message.listResponseMessage) {
      await handleListResponse(sock, sender, msg);
    } else if (messageBody.startsWith("ayah")) {
      await handleAyahSelection(sock, sender, msg, messageBody);
    }
  } catch (error) {
    console.error("Error in handleMessage:", error);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "An error occurred. Please try again.",
    });
  }
}

async function sendReciterList(sock, sender, msg) {
  const title = "My List";
  const text = "Please select a reciter:";
  const buttonText = "اختيار القارئ";
  const listSections = [
    {
      title: "قائمة المقرئين",
      rows: reciterList.map((reciter) => ({
        header: reciter.header,
        title: reciter.title,
        description: reciter.description,
        id: reciter.id,
      })),
    },
  ];

  try {
    await sendList(sock, sender, title, text, buttonText, listSections, msg);
    console.log("list sent successfully");
  } catch (error) {
    console.error("Failed to send list:", error);
    throw error;
  }
}

async function handleListResponse(sock, sender, msg) {
  try {
    const listResponse = msg.message.listResponseMessage;
    const selectedId = listResponse.singleSelectReply.selectedRowId;

    console.log(`List response received: ${selectedId}`);

    if (selectedId.startsWith("reciter")) {
      const reciterId = selectedId.split(" ")[1];
      await handleReciterSelection(sock, sender, msg, `reciter ${reciterId}`);
    } else if (selectedId.startsWith("surah")) {
      const surahId = selectedId.split(" ")[1];
      await handleSurahSelection(sock, sender, msg, `surah ${surahId}`);
    }
  } catch (error) {
    console.error("Error handling list response:", error);
    await sock.sendMessage(sender, {
      text: "Failed to process your selection.",
    });
  }
}

async function handleReciterSelection(sock, sender, msg, messageBody) {
  const reciter = messageBody.split(" ")[1];
  if (!reciter) {
    await sock.sendMessage(sender, { text: "Invalid reciter selection." });
    return;
  }

  console.log(`Reciter selected: ${reciter}`);
  userStates.set(sender, { selectedReciter: reciter });

  const title = "Select Surah";
  const text = "Please select a Surah:";
  const buttonText = "اختيار السورة";
  const listSections = [
    {
      title: "قائمة السور",
      rows: surahList.map((surah) => ({
        header: surah.header,
        title: surah.title,
        description: surah.description,
        id: surah.id,
      })),
    },
  ];

  try {
    await sendList(sock, sender, title, text, buttonText, listSections, msg);
    console.log("Surah list sent successfully");
  } catch (error) {
    console.error("Failed to send Surah list:", error);
    throw error;
  }
}

async function handleSurahSelection(sock, sender, msg, messageBody) {
  const surahId = messageBody.split(" ")[1];
  if (!surahId) {
    await sock.sendMessage(sender, { text: "Invalid surah selection." });
    return;
  }

  console.log(`Surah selected: ${surahId}`);
  const userState = userStates.get(sender);
  if (!userState || !userState.selectedReciter) {
    await sock.sendMessage(sender, { text: "Please select a reciter first." });
    return;
  }

  userState.selectedSurah = surahId;
  userStates.set(sender, userState);

  await sock.sendMessage(sender, {
    text: "Please provide the ayah number (3 digits, e.g., 025)",
  });
}

async function handleAyahSelection(sock, sender, msg, messageBody) {
  let ayahNumber = messageBody.split(" ")[1];
  if (!ayahNumber) {
    await sock.sendMessage(sender, { text: "Invalid ayah number." });
    return;
  }

  // Validate and format ayah number
  if (typeof ayahNumber === "number") {
    ayahNumber = ayahNumber.toString().padStart(3, "0");
  }
  if (!/^\d{3}$/.test(ayahNumber)) {
    await sock.sendMessage(sender, {
      text: "Ayah number must be a 3-digit number (e.g., 025).",
    });
    return;
  }

  console.log(`Ayah selected: ${ayahNumber}`);
  const userState = userStates.get(sender);
  if (!userState || !userState.selectedReciter || !userState.selectedSurah) {
    await sock.sendMessage(sender, {
      text: "Please select a reciter and surah first.",
    });
    return;
  }

  userState.selectedAyah = ayahNumber;
  const downloadUrl = `https://everyayah.com/data/${userState.selectedReciter}/${userState.selectedSurah}${userState.selectedAyah}.mp3`;

  try {
    await sock.sendMessage(sender, {
      text: `Here is your download link: ${downloadUrl}`,
    });
    console.log(`Download link sent: ${downloadUrl}`);
  } catch (error) {
    console.error("Failed to send download link:", error);
    throw error;
  }
}
